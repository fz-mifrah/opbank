
entity Client {
    cin String required,
    nom String required,
    prenom String required,
    adress String required,
    postalCode Long required,
    dateNaissence Instant required,
    email String required
}

entity Compte {
	rib Long required,
    dateOuvertur Instant ,
    code Integer required
}


entity Banque {
	nom String required,
	adresse String,
	email String required
}

entity CarteBancaire {
	numCompte String required,
    
}

entity Operation {
	numOperation String required,
    date Instant,
    typeOperatin String required,
    etatOperation String,
    montant Double required
}


entity Virement {
	description String
}

entity Beneficiaire {
	nomPrenom String required,
	numCompte Long required
}

entity Destinatair {
	nom String required,
	prenom String required,
	rib Long required
}

entity Transfer {
	cinDestinataireII String required,
    nomPrenomDestinataireII String required,
    telDestinataireII Long
}

entity Recharge {
    numTel Long required,
}

entity Operateur {
	nom String required
}

entity PaimentFacture {
    referance Long required
}

entity Facture {
	nom String required
}


relationship OneToOne {
	Client{nom} to Compte{Client(nom) },
    Compte{nom} to CarteBancaire,
    Operation{virement} to Virement,
    Operation{transfer} to Transfer,
    Operation{recharge} to Recharge,
    Operation{paimentFacture} to PaimentFacture,
    
}

relationship OneToMany {
	Compte{rib} to Operation{typeOperation},
    Virement{Destinataire(rib)} to Destinatair{rib},
    Virement{Beneficiaire(nomPrenom)} to Beneficiaire{numCompte},
    Banque{country} to Compte,    
}

relationship ManyToMany {
	Recharge{Operateur(nom) } to Operateur{nom},
    PaimentFacture{Facture(nom) } to Facture{nom},
    
}

// Set pagination options
//paginate JobHistory, Employee with infinite-scroll
paginate Client, Compte, Banque, Operation,
	Virement, Transfer, Recharge, PaimentFacture,
    Beneficiaire, Destinataire with pagination

// Use Data Transfer Objects (DTO)
dto * with mapstruct

// Set service options to all except few
service all with serviceImpl // except Employee, Job

// Set an angular suffix
// angularSuffix * with mySuffix
